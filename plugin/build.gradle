plugins {
    id 'com.gradle.plugin-publish' version '0.16.0'
    id 'groovy-gradle-plugin'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.spockframework:spock-bom:2.0-groovy-3.0')
    testImplementation 'org.spockframework:spock-core'
}

gradlePlugin {
    // Define the plugin
    plugins {
        manifoldPlugin {
            id = 'systems.manifold.manifold-gradle-plugin'
            implementationClass = 'systems.manifold.ManifoldGradlePlugin'
        }
    }
}

pluginBundle {
    website = 'http://manifold.systems/'
    vcsUrl = 'https://github.com/manifold-systems/manifold-gradle-plugin'
    description = '''Manifold is a Java compiler plugin, its features include Metaprogramming, Properties, Extension Methods, Operator Overloading, a Preprocessor, and a lot more.
                    |
                    |This Gradle plugin configures JavaCompile tasks to support the manifold compiler plugin.'''.stripMargin()
    tags = ['manifold', 'javac', 'compiler', 'compiler-plugin']

    plugins {
        manifoldPlugin {
            displayName = 'Manifold plugin for Gradle'
        }
    }

    mavenCoordinates {
        groupId = 'systems.manifold'
        artifactId = 'manifold-gradle-plugin'
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

def test = tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
    shouldRunAfter(test) // force unit tests to run first, not in parallel to functional tests
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

